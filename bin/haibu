#!/usr/bin/env node

var path = require('path'),
    util = require('util'),
    flatiron = require('flatiron'),
    argv = require('optimist').argv,
    haibu = require('../lib/haibu');

var help = [
    'usage: haibu-server [options]',
    '',
    'Starts the haibu API server responsible for spawning node.js applications.',
    '',
    'options:',
    '  -a                  IP Address that you want the server to bind to  [dynamic]',
    '  -p                  Port that you want the server to run on         [9002]',
    '  -e [env]            The environment to the specified command in     [development]',
    '  --logger            Use the haibu logger plugin                     [true]',
    '  --chroot            Deploy drones using chroot',
    '  --advanced-replies  Send extra info with replies',
    '  -s --silent         Suppress the log messages from the output',
    '  -h, --help          You\'re staring at it',
].join('\n');

if (argv.h || argv.help) {
  util.puts(help);
}
else {
  var env  = argv.env || 'development',
      port = argv.p   || 9002;
  
  if (argv.chroot) {
    haibu.use(haibu.plugins.chroot, {});
  }
  
  if (argv.coffee) {
    haibu.use(haibu.plugins.coffee, {});
  }
  
  if (argv['advanced-replies']) {
    haibu.use(haibu.plugins['advanced-replies'], {});
  }
  
  haibu.use(flatiron.plugins.http);
  haibu.createRoutes(haibu.router);
  haibu.common.getIpAddresses(argv.a, function (err, addresses) {
    if (err) {
      haibu.emit('error', err);
    }
    
    var address = addresses[0];
    var options = {
      env: env,
      port: port,
      host: address
    };
    
    haibu.config.file({ file: path.join(__dirname, '..', 'config', 'config.json') });
    
    haibu.start(options, function () {
      haibu.utils.showWelcome('api-server', address, port);
    });
  });
}